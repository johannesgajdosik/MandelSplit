/* Johannes Gajdosik
Say goodbye to boost::intrusive_ptr, because it introduces
BOOST_ASSERT( p_ != 0 ); in T & operator*() const and T * operator->() const.
This is a killer for me, because I sometime call member functions of
0-pointers, checking the validity of "this" from within the function body.

This code is heavily influenced by boost::intrusive_ptr, so I include the
license of boost 1.35.
*/

/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#ifndef _INTRUSIVE_PTR_H_
#define _INTRUSIVE_PTR_H_

template<class T>
struct RefCountHandlerDefault {
  static void retain(T *p) {p->retain();}
  static void release(T *p) {p->release();}
};

template<class T,class RefCountHandler=RefCountHandlerDefault<T> >
class IntrusivePtr {
public:
  IntrusivePtr(void) : p(0) {
  }
  IntrusivePtr(T *const q) : p(q) {
    if (p) RefCountHandler::retain(p);
  }
  IntrusivePtr(const IntrusivePtr &q) : p(q.get()) {
    if (p) RefCountHandler::retain(p);
  }
  template<class U> IntrusivePtr(const IntrusivePtr<U> &q) : p(q.get()) {
    if (p) RefCountHandler::retain(p);
  }
  ~IntrusivePtr(void) {
    if (p) RefCountHandler::release(p);
  }
  void reset(void) {
    if (p) {
      RefCountHandler::release(p);
      p = 0;
    }
  }
  void reset(T *const q) {
    if (p != q) {
      if (p) RefCountHandler::release(p);
      p = q;
      if (p) RefCountHandler::retain(p);
    }
  }
  template<class U> void reset(U *const q) {
    if (p != q) {
      if (p) RefCountHandler::release(p);
      p = q;
      if (p) RefCountHandler::retain(p);
    }
  }
  void reset(const IntrusivePtr &q) {
    reset(q.get());
  }
  template<class U> void reset(const IntrusivePtr<U> &q) {
    reset(q.get());
  }
  const IntrusivePtr &operator=(const IntrusivePtr &q) {
    reset(q);
    return *this;
  }
  template<class U> const IntrusivePtr &operator=(const IntrusivePtr<U> &q) {
    reset(q);
    return *this;
  }
  const IntrusivePtr &operator=(T *const q) {
    reset(q);
    return *this;
  }
  template<class U> const IntrusivePtr &operator=(U *const q) {
    reset(q);
    return *this;
  }

  T *get(void) const {return p;}
  T &operator*(void) const {return *p;}
  T *operator->(void) const {return p;}
  operator bool(void) const {return p;}

  template<class U> bool operator==(const IntrusivePtr<U> &q) const {
      return p == q.get();
  }
  template<class U> bool operator==(const U *const q) const {
      return p == q;
  }
  template<class U> bool operator!=(const IntrusivePtr<U> &q) const {
      return p != q.get();
  }
  template<class U> bool operator!=(const U *const q) const {
      return p != q;
  }
  template<class U> bool operator<(const IntrusivePtr<U> &q) const {
      return p < q.get();
  }
private:
  T *p;
};

template<class T, class U>
inline bool operator==(const T *const q, IntrusivePtr<U> const &p) {
  return q == p.get();
}

template<class T, class U>
inline bool operator!=(const T *const q, IntrusivePtr<U> const &p) {
  return q != p.get();
}


template<class T, class U>
IntrusivePtr<T> static_pointer_cast(IntrusivePtr<U> const &p) {
  return static_cast<T *>(p.get());
}

template<class T, class U>
IntrusivePtr<T> const_pointer_cast(IntrusivePtr<U> const &p) {
  return const_cast<T *>(p.get());
}

template<class T, class U>
IntrusivePtr<T> dynamic_pointer_cast(IntrusivePtr<U> const &p) {
  return dynamic_cast<T *>(p.get());
}

#endif

